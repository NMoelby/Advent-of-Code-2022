mutate(
group = rep(seq.int(from = 1, to = NROW(.) / 3), each = 3),
rucksack = rep(c("first", "second", "third"), length.out = NROW(.))
) #%>%
rucksacks %>%
mutate(
group = rep(seq.int(from = 1, to = NROW(.) / 3), each = 3),
rucksack = rep(c("first", "second", "third"), length.out = NROW(.))
) %>%
pivot_wider(
names_from = rucksack,
values_from = items
) %>%
mutate(
common = find_common_revised(first, second, third),
priority_value = recode(common, !!!priority)
) %>%
count(wt = priority_value)
rucksacks %>%
mutate(
items_count = nchar(items),
first_compartment = str_sub(items, start = 1, end = (items_count / 2)),
second_compartment = str_sub(items, start = (items_count / 2) + 1, end = -1),
common = find_common(first_compartment, second_compartment),
priority_value = recode(common, !!!priority)
) %>%
count(wt = priority_value)
# Load Packages and data --------------------------------------------------
library(tidyverse)
assignments_raw <- read_lines("data/d04.txt")
assignments_raw
library(unglue)
assignments_raw %>%
enframe(name = NULL, value = "assignment_pairs")
assignments_raw %>%
enframe(name = NULL, value = "assignment_pairs") %>%
unglue_data("{first_elf_start}-{first_elf_end},{second_elf_start}-{second_elf_end}") %>%
head()
assignments_raw %>%
enframe(name = NULL, value = "assignment_pairs") %>%
unglue_data(assignment_pairs, "{first_elf_start}-{first_elf_end},{second_elf_start}-{second_elf_end}") %>%
head()
assignments_raw %>%
enframe(name = NULL, value = "assignment_pairs") %>%
unglue_data(assignment_pairs, "{first_elf_start}-{first_elf_end},{second_elf_start}-{second_elf_end}", open = "{", close = "}") %>%
head()
assignments_raw %>%
enframe(name = NULL, value = "assignment_pairs") %>%
unglue_data("{first_elf_start}-{first_elf_end},{second_elf_start}-{second_elf_end}", open = "{", close = "}") %>%
head()
assignments_raw %>%
enframe(name = NULL, value = "assignment_pairs") #%>%
assignments_raw %>%
enframe(name = NULL, value = "assignment_pairs") %>%
unglue_data("{first_elf_start}-{first_elf_end},{second_elf_start}-{second_elf_end}", open = "{", close = "}") %>%
head()
assignments_raw %>%
enframe(name = NULL, value = "assignment_pairs") %>%
unglue_data(patterns = "{first_elf_start}-{first_elf_end},{second_elf_start}-{second_elf_end}") %>%
head()
assignments_raw %>%
unglue_data(patterns = "{first_elf_start}-{first_elf_end},{second_elf_start}-{second_elf_end}", convert = TRUE) %>%
head()
assignments_raw %>%
unglue_data(patterns = "{first_elf_start}-{first_elf_end},{second_elf_start}-{second_elf_end}", convert = TRUE) %>%
as_tibble() %>%
head()
assignments <-
assignments_raw %>%
unglue_data(patterns = "{first_elf_start}-{first_elf_end},{second_elf_start}-{second_elf_end}", convert = TRUE) %>%
as_tibble()
a <- 2
b <- 3
x <- 2
y <- 4
# first elf contains second elf
res <- if_else(
a <= x && b >= y,
TRUE,
# second elf contains first elf
if_else(
a >= x && b <= y,
TRUE,
FALSE
),
FALSE
)
a <- 1
# first elf contains second elf
res <- if_else(
a <= x && b >= y,
TRUE,
# second elf contains first elf
if_else(
a >= x && b <= y,
TRUE,
FALSE
),
FALSE
)
a <- 2
b <- 3
x <- 1
y <- 4
# first elf contains second elf
res <- if_else(
a <= x && b >= y,
TRUE,
# second elf contains first elf
if_else(
a >= x && b <= y,
TRUE,
FALSE
),
FALSE
)
a <- 2
b <- 3
x <- 2
y <- 3
# first elf contains second elf
res <- if_else(
a <= x && b >= y,
TRUE,
# second elf contains first elf
if_else(
a >= x && b <= y,
TRUE,
FALSE
),
FALSE
)
fully_contained <- Vectorize(fully_contained)
fully_contained <- function(a, b, x, y) {
# first elf contains second elf
res <- if_else(
a <= x && b >= y,
TRUE,
# second elf contains first elf
if_else(
a >= x && b <= y,
TRUE,
FALSE
),
FALSE
)
return(res)
}
fully_contained <- Vectorize(fully_contained)
assignments %>%
mutate(
fully_contained = fully_contained(first_elf_start, first_elf_end, second_elf_start, second_elf_end)
)
fully_contained <- function(a, b, x, y) {
# first elf contains second elf
res <- if_else(
a <= x && b >= y,
1,
# second elf contains first elf
if_else(
a >= x && b <= y,
1,
0
),
0
)
return(res)
}
fully_contained <- Vectorize(fully_contained)
assignments %>%
mutate(
fully_contained = fully_contained(first_elf_start, first_elf_end, second_elf_start, second_elf_end)
)
assignments %>%
mutate(
fully_contained = fully_contained(first_elf_start, first_elf_end, second_elf_start, second_elf_end)
) %>%
count(wt = fully_contained)
# first elf contains second elf
res <- if_else(
a <- 8
b <- 82
return(res)
# first elf contains second elf
a <- 8
b <- 82
x <- 3
y <- 96
if_else(
a >= x && a <= y || b >= x && b <= y,
1,
0
)
# first elf contains second elf
a <- 1
b <- 99
x <- 3
y <- 96
if_else(
a >= x && a <= y || b >= x && b <= y,
1,
0
)
# first elf contains second elf
a <- 1
b <- 99
x <- 3
y <- 96
if_else(
a >= x && a <= y || b >= x && b <= y,
1,
if_else(
x >= a && x <= b || y >= a && y <= b,
1,
0
),
0
)
# first elf contains second elf
a <- 1
b <- 2
x <- 2
y <- 3
if_else(
a >= x && a <= y || b >= x && b <= y,
1,
if_else(
x >= a && x <= b || y >= a && y <= b,
1,
0
),
0
)
# first elf contains second elf
a <- 1
b <- 2
x <- 3
y <- 3
if_else(
a >= x && a <= y || b >= x && b <= y,
1,
if_else(
x >= a && x <= b || y >= a && y <= b,
1,
0
),
0
)
overlap <- function(a, b, x, y) {
res <-
if_else(
a >= x && a <= y || b >= x && b <= y,
1,
if_else(
x >= a && x <= b || y >= a && y <= b,
1,
0
),
0
)
return(res)
}
overlap <- Vectorize(overlap)
overlap = overlap(first_elf_start, first_elf_end, second_elf_start, second_elf_end)
library(tidyverse)
library(unglue)
assignments_raw <- read_lines("data/d04.txt")
assignments <-
assignments_raw %>%
unglue_data(patterns = "{first_elf_start}-{first_elf_end},{second_elf_start}-{second_elf_end}", convert = TRUE) %>%
as_tibble()
overlap <- function(a, b, x, y) {
res <-
if_else(
a >= x && a <= y || b >= x && b <= y,
1,
if_else(
x >= a && x <= b || y >= a && y <= b,
1,
0
),
0
)
return(res)
}
overlap <- Vectorize(overlap)
assignments %>%
overlap = overlap(first_elf_start, first_elf_end, second_elf_start, second_elf_end)
assignments %>%
mutate(
assignments %>%
mutate(
overlap = overlap(first_elf_start, first_elf_end, second_elf_start, second_elf_end)
assignments
assignments
assignments %>%
mutate(
overlap = overlap(first_elf_start, first_elf_end, second_elf_start, second_elf_end)
)
assignments %>%
mutate(
overlap = overlap(first_elf_start, first_elf_end, second_elf_start, second_elf_end)
) %>%
count(wt = overlap)
?map2_lgl
overlap <- function(a, b, x, y) {
res <-
if_else(
a >= x && a <= y || b >= x && b <= y,
TRUE,
if_else(
x >= a && x <= b || y >= a && y <= b,
TRUE,
FALSE
),
FALSE
)
return(res)
}
overlap <- Vectorize(overlap)
assignments %>%
mutate(
overlap = overlap(first_elf_start, first_elf_end, second_elf_start, second_elf_end)
) %>%
count(wt = overlap)
df <- read_lines("data/d05.txt")
# Load packages and Data --------------------------------------------------
library(tidyverse)
df
df <- read_lines("data/d05.txt") %>%
enframe(name = NULL)
df
df %>%
slice_head(n = 9)
df %>%
slice_head(n = -9)
df %>%
slice_head(n = 9)
df %>%
slice_tail(n = -9)
df %>%
slice_tail(n = -10)
df %>%
slice_head(n = 9)
df %>%
slice_head(n = 9) %>%
?unglue_regex()
df %>%
slice_head(n = 9) %>%
?unglue_regex()
?unglue_regex()
df %>%
slice_head(n = 9) %>%
unglue_regex("[{first}] [{second}] [{third}] [{forth}] [{fifth}] [{sixth}] [{seventh}] [{eighth}] [{ninth}]", convert = TRUE)
df %>%
slice_head(n = 9) %>%
unglue_regex("[{first}] [{second}] [{third}] [{forth}] [{fifth}] [{sixth}] [{seventh}] [{eighth}] [{ninth}]")
df %>%
slice_tail(n = -10)# %>%
unglue_data("move {qty} from {source} to {destination}",
convert = TRUE
)
df %>%
slice_head(n = 9) %>%
unglue_regex(patterns = "[{first}] [{second}] [{third}] [{forth}] [{fifth}] [{sixth}] [{seventh}] [{eighth}] [{ninth}]")
unglue_data(patterns = "move {qty} from {source} to {destination}",
convert = TRUE
)
unglue_data(
patterns = "move {qty} from {source} to {destination}",
convert = TRUE
)
procedure <-
df %>%
slice_tail(n = -10)# %>%
procedure <-
df %>%
slice_tail(n = -10) %>%
unglue_data(
patterns = "move {qty} from {source} to {destination}",
convert = TRUE
)
df %>%
slice_tail(n = -10) %>%
unglue_data(
patterns = "move {qty} from {source} to {destination}",
convert = TRUE
)
df %>%
slice_tail(n = -10) %>%
unglue_data(
patterns = "move {qty} from {source} to {destination}",
convert = TRUE
)
df <- read_lines("data/d05.txt")
df %>%
slice_tail(n = -10) %>%
unglue_data(
patterns = "move {qty} from {source} to {destination}",
convert = TRUE
)
stacks_raw <- read_lines("data/d05.txt")
read_lines("data/d05.txt", skip = 10)
read_lines("data/d05.txt", skip = 9) %>%
head
read_lines("data/d05.txt", skip = 10) %>%
head
procedures_raw <- read_lines("data/d05.txt", skip = 10)
procedures_raw %>%
unglue_data(
patterns = "move {qty} from {source} to {destination}",
convert = TRUE
)
?read_fwf
stacks_raw <- read_fwf("data/d05.txt")
stacks_raw <- read_fwf("data/d05.txt", n_max = 8)
stacks_raw %>%
unglue_regex(patterns = "[{first}] [{second}] [{third}] [{forth}] [{fifth}] [{sixth}] [{seventh}] [{eighth}] [{ninth}]")
stacks_raw
stacks_raw %>%
arrange(desc(row_number()))
stacks_raw %>%
arrange(desc(row_number())) %>%
as.list()
stacks_raw %>%
arrange(desc(row_number())) %>%
as.list() %>%
map(~.x[!is.na(.x)])
stacks_raw %>%
arrange(desc(row_number())) %>%
as.list() %>%
map(~.x[!is.na(.x)])
procedures_raw %>%
unglue_data(
patterns = "move {qty} from {source} to {destination}",
convert = TRUE
)
# Load packages and Data --------------------------------------------------
library(tidyverse)
stacks_raw <- read_fwf("data/d05.txt", n_max = 8)
stacks <-
stacks_raw %>%
arrange(desc(row_number())) %>%
as.list() %>%
map(~.x[!is.na(.x)])
procedures_raw <- read_lines("data/d05.txt", skip = 10)
procedures <-
procedures_raw %>%
unglue_data(
patterns = "move {qty} from {source} to {destination}",
convert = TRUE
)
library(unglue)
zzz <- list(
a = letters[1:2],
b = letters[1:5]
)
View(zzz)
vec_source <- zzz[["a"]]
vec_destination <- zzz[["b"]]
# move 1
after_source <- before_source[-length(before_source)]
before_source <- zzz[["a"]]
before_destination <- zzz[["b"]]
# move 1
after_source <- before_source[-length(before_source)]
after_destination <- append(before_destination, before_source[length(before_source)])
# move 2
for (i in seq_len(2)) {
before_source <- zzz[["a"]]
before_destination <- zzz[["b"]]
zzz[["a"]] <- before_source[-length(before_source)]
zzz[["b"]] <- append(before_destination, before_source[length(before_source)])
}
zzz
# move 2
for (i in seq_len(3)) {
before_source <- zzz[["a"]]
before_destination <- zzz[["b"]]
zzz[["a"]] <- before_source[-length(before_source)]
zzz[["b"]] <- append(before_destination, before_source[length(before_source)])
}
zzz
# move 2
for (i in seq_len(1)) {
before_source <- zzz[["a"]]
before_destination <- zzz[["b"]]
zzz[["a"]] <- before_source[-length(before_source)]
zzz[["b"]] <- append(before_destination, before_source[length(before_source)])
}
zzz
zzz <- list(
a = letters[1:2],
b = letters[1:5]
)
# move 2
for (i in seq_len(1)) {
before_source <- zzz[["a"]]
before_destination <- zzz[["b"]]
zzz[["a"]] <- before_source[-length(before_source)]
zzz[["b"]] <- append(before_destination, before_source[length(before_source)])
}
zzz
# move 2
for (i in seq_len(1)) {
before_source <- zzz[["a"]]
before_destination <- zzz[["b"]]
zzz[["a"]] <- before_source[-length(before_source)]
zzz[["b"]] <- append(before_destination, before_source[length(before_source)])
}
zzz
?length
